---
import { APP_BLOG } from 'astrowind:config';

import Grid from '~/components/blog/Grid.astro';

import { getBlogPermalink } from '~/utils/permalinks';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import type { Widget } from '~/types';
import Button from '~/components/ui/Button.astro';

export interface Props extends Widget {
  title?: string;
  linkText?: string;
  linkUrl?: string | URL;
  information?: string;
  count?: number;
}

const {
  title = await Astro.slots.render('title'),
  linkText = 'Visa alla poster',
  linkUrl = getBlogPermalink(),
  information = await Astro.slots.render('information'),
  count = 6,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

// This function from blog-wordpress.ts properly generates permalinks using POST_PERMALINK_PATTERN
const generatePermalink = async ({
  slug,
  publishDate,
  category,
}: {
  slug: string;
  publishDate: Date;
  category: string | undefined;
}) => {
  const { POST_PERMALINK_PATTERN, trimSlash } = await import('~/utils/permalinks');

  const year = String(publishDate.getFullYear()).padStart(4, '0');
  const month = String(publishDate.getMonth() + 1).padStart(2, '0');
  const day = String(publishDate.getDate()).padStart(2, '0');
  const hour = String(publishDate.getHours()).padStart(2, '0');
  const minute = String(publishDate.getMinutes()).padStart(2, '0');
  const second = String(publishDate.getSeconds()).padStart(2, '0');

  const permalink = POST_PERMALINK_PATTERN.replace('%slug%', slug)
    .replace('%category%', category || '')
    .replace('%year%', year)
    .replace('%month%', month)
    .replace('%day%', day)
    .replace('%hour%', hour)
    .replace('%minute%', minute)
    .replace('%second%', second);

  return permalink
    .split('/')
    .map((el) => trimSlash(el))
    .filter((el) => !!el)
    .join('/');
};

// Fetch latest posts server-side using WordPress REST API directly
let posts: any[] = [];
let wordpressAvailable = true;

try {
  // Direct REST API call to WordPress
  const WORDPRESS_API_URL = 'https://blogg.rygg.nu/wp-json/wp/v2/posts';
  const response = await fetch(`${WORDPRESS_API_URL}?per_page=${count}&_embed`);
  const wpPosts = await response.json();

  posts = await Promise.all(
    wpPosts.map(async (wpPost: any) => {
      // Convert WordPress post format to our post format
      const post = {
        slug: wpPost.slug,
        publishDate: new Date(wpPost.date),
        title: wpPost.title.rendered,
        excerpt: wpPost.excerpt.rendered.replace(/<[^>]*>/g, '').trim(),
        image: wpPost._embedded?.['wp:featuredmedia']?.[0]?.source_url,
        category: {
          slug: wpPost._embedded?.['wp:term']?.[0]?.[0]?.slug,
          title: wpPost._embedded?.['wp:term']?.[0]?.[0]?.name,
        },
        author: wpPost._embedded?.['wp:term']?.[0]?.[0]?.name || 'Johny Åhman',
      };

      const permalink = await generatePermalink({
        slug: post.slug,
        publishDate: post.publishDate,
        category: post.category?.slug,
      });

      return {
        ...post,
        permalink,
      };
    })
  );
} catch (error) {
  console.error('WordPress REST API failed for BlogLatestPosts:', error);
  wordpressAvailable = false;
  // posts remains empty array - will show fallback UI
}
---

{
  APP_BLOG.isEnabled ? (
    <WidgetWrapper id={id} isDark={isDark} containerClass={classes?.container as string} bg={bg}>
      <div class="flex flex-col lg:justify-between lg:flex-row mb-8">
        {title && (
          <div class="md:max-w-sm">
            <h2
              class="text-3xl font-bold tracking-tight sm:text-4xl sm:leading-none group font-heading mb-2"
              set:html={title}
            />
            {APP_BLOG.list.isEnabled && linkText && linkUrl && (
              <Button variant="link" href={linkUrl}>
                {' '}
                {linkText} »
              </Button>
            )}
          </div>
        )}

        {information && <p class="text-muted dark:text-slate-400 lg:text-sm lg:max-w-md" set:html={information} />}
      </div>

      {wordpressAvailable && posts.length > 0 ? (
        <Grid posts={posts} />
      ) : (
        <div class="text-center py-12 bg-blue-50 rounded-lg border border-blue-200">
          <div class="max-w-md mx-auto">
            <div class="text-blue-500 mb-4">
              <svg class="w-12 h-12 mx-auto" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 012 0v4a1 1 0 11-2 0V9z" clip-rule="evenodd"></path>
              </svg>
            </div>
            <h3 class="text-lg font-semibold text-blue-900 mb-2">Blogginlägg laddas snart</h3>
            <p class="text-blue-700 text-sm mb-4">
              Vårt blogghanteringssystem håller på att konfigureras. Blogginlägg kommer att visas här när systemet är aktivt.
            </p>
            <p class="text-xs text-blue-600">
              För att hantera blogginlägg, använd WordPress-admin i ert befintliga system.
            </p>
          </div>
        </div>
      )}
    </WidgetWrapper>
  ) : (
    <Fragment />
  )
}
