---
import type { Form as Props } from '~/types';
import Button from '~/components/ui/Button.astro';

const { inputs, textarea, disclaimer, button = 'Contact us', description = '' } = Astro.props;
---

<form id="contact-form" class="contact-form">
  {
    inputs &&
      inputs.map(
        ({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '' }) =>
          name && (
            <div class="mb-6">
              {label && (
                <label for={name} class="block text-sm font-medium">
                  {label}
                </label>
              )}
              <input
                type={type}
                name={name}
                id={name}
                autocomplete={autocomplete}
                placeholder={placeholder}
                required
                class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
              />
            </div>
          )
      )
  }

  {
    textarea && (
      <div>
        <label for="textarea" class="block text-sm font-medium">
          {textarea.label}
        </label>
        <textarea
          id="textarea"
          name={textarea.name ? textarea.name : 'message'}
          rows={textarea.rows ? textarea.rows : 4}
          placeholder={textarea.placeholder}
          required
          class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
        />
      </div>
    )
  }

  {
    disclaimer && (
      <div class="mt-3 flex items-start">
        <div class="flex mt-0.5">
          <input
            id="disclaimer"
            name="disclaimer"
            type="checkbox"
            class="cursor-pointer mt-1 py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
          />
        </div>
        <div class="ml-3">
          <label for="disclaimer" class="cursor-pointer select-none text-sm text-gray-600 dark:text-gray-400">
            {disclaimer.label}
          </label>
        </div>
      </div>
    )
  }

  {
    button && (
      <div class="mt-10 grid">
        <Button variant="primary" type="submit">
          {button}
        </Button>
      </div>
    )
  }

  {
    description && (
      <div class="mt-3 text-center">
        <p class="text-sm text-gray-600 dark:text-gray-400">{description}</p>
      </div>
    )
  }

  <!-- Success/Error Messages -->
  <div id="form-message" class="mt-4 hidden">
    <p id="message-text" class="text-sm"></p>
  </div>
</form>

<script>
  const form = document.getElementById('contact-form') as HTMLFormElement;
  const messageDiv = document.getElementById('form-message') as HTMLDivElement;
  const messageText = document.getElementById('message-text') as HTMLParagraphElement;

  if (form && messageDiv && messageText) {
    form.addEventListener('submit', async function (e) {
      e.preventDefault();

      // Basic validation
      const inputs = form.querySelectorAll('input[required], textarea[required]');
      let isValid = true;

      inputs.forEach((input) => {
        const inputElement = input as HTMLInputElement | HTMLTextAreaElement;
        if (!inputElement.value.trim()) {
          inputElement.classList.add('border-red-500');
          isValid = false;
        } else {
          inputElement.classList.remove('border-red-500');
        }
      });

      if (!isValid) {
        showMessage('Please fill in all required fields.', 'error');
        return;
      }

      // Send form data to secure API endpoint
      try {
        const formData = new FormData(form);
        const response = await fetch('/api/send-email', {
          method: 'POST',
          body: formData,
        });

        const result = await response.json();

        if (result.success) {
          showMessage(result.message, 'success');
          form.reset();
        } else {
          showMessage(result.message, 'error');
        }
      } catch (error) {
        showMessage('Meddelandet kunde inte skickas. Var god försök igen.', 'error');
        console.error('Form submission error:', error);
      }
    });

    function showMessage(text: string, type: string) {
      messageText.textContent = text;
      messageDiv.className = `mt-4 ${type === 'success' ? 'text-green-600' : 'text-red-600'}`;
      messageDiv.classList.remove('hidden');

      // Hide message after 5 seconds
      setTimeout(() => {
        messageDiv.classList.add('hidden');
      }, 5000);
    }
  }
</script>
